{
	"info": {
		"name": "Sistema de Processamento de Pedidos API",
		"description": "Collection para testar a API do Sistema de Processamento de Pedidos",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"version": "1.0.0"
	},
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3001",
			"type": "string"
		},
		{
			"key": "token",
			"value": "",
			"type": "string"
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"item": [
		{
			"name": "üë§ Users",
			"item": [
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has success message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"User registered successfully\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Jo√£o Silva\",\n  \"email\": \"joao@email.com\",\n  \"password\": \"MinhaSenh@123\",\n  \"role\": \"user\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": ["{{baseUrl}}"],
							"path": ["users"]
						},
						"description": "Registra um novo usu√°rio no sistema"
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Jo√£o Silva\",\n  \"email\": \"joao@email.com\",\n  \"password\": \"MinhaSenh@123\",\n  \"role\": \"user\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": ["{{baseUrl}}"],
									"path": ["users"]
								}
							},
							"status": "Created",
							"code": 201,
							"body": "{\n  \"message\": \"User registered successfully\"\n}"
						}
					]
				},
				{
					"name": "Register Admin User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has success message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"User registered successfully\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Admin User\",\n  \"email\": \"admin@email.com\",\n  \"password\": \"AdminPass@123\",\n  \"role\": \"admin\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": ["{{baseUrl}}"],
							"path": ["users"]
						},
						"description": "Registra um novo usu√°rio administrador"
					}
				},
				{
					"name": "Authenticate User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.token).to.be.a('string');",
									"});",
									"",
									"pm.test(\"Response has user data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.user).to.have.property('id');",
									"    pm.expect(jsonData.user).to.have.property('name');",
									"    pm.expect(jsonData.user).to.have.property('email');",
									"    pm.expect(jsonData.user).to.have.property('role');",
									"});",
									"",
									"// Salvar token para usar em outras requisi√ß√µes",
									"if (pm.response.code === 200) {",
									"    var jsonData = pm.response.json();",
									"    pm.collectionVariables.set(\"token\", jsonData.token);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"joao@email.com\",\n  \"password\": \"MinhaSenh@123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/authenticate",
							"host": ["{{baseUrl}}"],
							"path": ["users", "authenticate"]
						},
						"description": "Autentica um usu√°rio e retorna um token JWT"
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"joao@email.com\",\n  \"password\": \"MinhaSenh@123\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users/authenticate",
									"host": ["{{baseUrl}}"],
									"path": ["users", "authenticate"]
								}
							},
							"status": "OK",
							"code": 200,
							"body": "{\n  \"message\": \"User authenticated successfully\",\n  \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"user\": {\n    \"id\": \"user-uuid\",\n    \"name\": \"Jo√£o Silva\",\n    \"email\": \"joao@email.com\",\n    \"role\": \"user\"\n  }\n}"
						}
					]
				},
				{
					"name": "Authenticate Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.token).to.be.a('string');",
									"});",
									"",
									"pm.test(\"User is admin\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.user.role).to.eql('admin');",
									"});",
									"",
									"// Salvar token de admin para usar em outras requisi√ß√µes",
									"if (pm.response.code === 200) {",
									"    var jsonData = pm.response.json();",
									"    pm.collectionVariables.set(\"token\", jsonData.token);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"admin@email.com\",\n  \"password\": \"AdminPass@123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/authenticate",
							"host": ["{{baseUrl}}"],
							"path": ["users", "authenticate"]
						},
						"description": "Autentica um usu√°rio administrador"
					}
				},
				{
					"name": "Get All Users (Admin Only)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": ["{{baseUrl}}"],
							"path": ["users"]
						},
						"description": "Lista todos os usu√°rios (apenas administradores)"
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": ["{{baseUrl}}"],
									"path": ["users"]
								}
							},
							"status": "OK",
							"code": 200,
							"body": "[\n  {\n    \"id\": \"user-uuid-1\",\n    \"name\": \"Jo√£o Silva\",\n    \"email\": \"joao@email.com\",\n    \"role\": \"user\",\n    \"createdAt\": \"2025-07-08T22:00:00.000Z\"\n  },\n  {\n    \"id\": \"user-uuid-2\",\n    \"name\": \"Admin User\",\n    \"email\": \"admin@email.com\",\n    \"role\": \"admin\",\n    \"createdAt\": \"2025-07-08T22:00:00.000Z\"\n  }\n]"
						}
					]
				}
			]
		},
		{
			"name": "üß™ Test Scenarios",
			"item": [
				{
					"name": "Register User with Invalid Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has validation errors\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.be.an('array');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"\",\n  \"email\": \"invalid-email\",\n  \"password\": \"123\",\n  \"role\": \"invalid-role\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": ["{{baseUrl}}"],
							"path": ["users"]
						},
						"description": "Testa valida√ß√£o de dados inv√°lidos no registro"
					}
				},
				{
					"name": "Register Duplicate User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									"",
									"pm.test(\"Response has conflict message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include('already exists');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Jo√£o Silva\",\n  \"email\": \"joao@email.com\",\n  \"password\": \"MinhaSenh@123\",\n  \"role\": \"user\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": ["{{baseUrl}}"],
							"path": ["users"]
						},
						"description": "Testa registro de usu√°rio duplicado"
					}
				},
				{
					"name": "Authenticate with Invalid Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Response has error message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include('Invalid credentials');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"joao@email.com\",\n  \"password\": \"wrong-password\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/authenticate",
							"host": ["{{baseUrl}}"],
							"path": ["users", "authenticate"]
						},
						"description": "Testa autentica√ß√£o com credenciais inv√°lidas"
					}
				},
				{
					"name": "Access Admin Route without Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Response has unauthorized message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include('token');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": ["{{baseUrl}}"],
							"path": ["users"]
						},
						"description": "Testa acesso a rota protegida sem token"
					}
				}
			]
		},
		{
			"name": "üîß Health Check",
			"item": [
				{
					"name": "Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/health",
							"host": ["{{baseUrl}}"],
							"path": ["health"]
						},
						"description": "Verifica se a API est√° funcionando"
					}
				}
			]
		}
	]
}
