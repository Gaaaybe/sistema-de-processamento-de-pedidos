{
	"info": {
		"name": "Sistema de Processamento de Pedidos API",
		"description": "Collection para testar a API do Sistema de Processamento de Pedidos",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"version": "1.0.0"
	},
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3001",
			"type": "string"
		},
		{
			"key": "token",
			"value": "",
			"type": "string"
		},
		{
			"key": "userToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "adminToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "orderId",
			"value": "",
			"type": "string"
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"item": [
		{
			"name": "üë§ Users",
			"item": [
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has success message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"User registered successfully\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Jo√£o Silva\",\n  \"email\": \"joao@email.com\",\n  \"password\": \"MinhaSenh@123\",\n  \"role\": \"user\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": ["{{baseUrl}}"],
							"path": ["users"]
						},
						"description": "Registra um novo usu√°rio no sistema"
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Jo√£o Silva\",\n  \"email\": \"joao@email.com\",\n  \"password\": \"MinhaSenh@123\",\n  \"role\": \"user\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": ["{{baseUrl}}"],
									"path": ["users"]
								}
							},
							"status": "Created",
							"code": 201,
							"body": "{\n  \"message\": \"User registered successfully\"\n}"
						}
					]
				},
				{
					"name": "Register Admin User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has success message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"User registered successfully\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Admin User\",\n  \"email\": \"admin@email.com\",\n  \"password\": \"AdminPass@123\",\n  \"role\": \"admin\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": ["{{baseUrl}}"],
							"path": ["users"]
						},
						"description": "Registra um novo usu√°rio administrador"
					}
				},
				{
					"name": "Authenticate User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.token).to.be.a('string');",
									"});",
									"",
									"pm.test(\"Response has user data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.user).to.have.property('id');",
									"    pm.expect(jsonData.user).to.have.property('name');",
									"    pm.expect(jsonData.user).to.have.property('email');",
									"    pm.expect(jsonData.user).to.have.property('role');",
									"});",
									"",
									"// Salvar token de usu√°rio para usar em outras requisi√ß√µes",
									"if (pm.response.code === 200) {",
									"    var jsonData = pm.response.json();",
									"    pm.collectionVariables.set(\"token\", jsonData.token);",
									"    pm.collectionVariables.set(\"userToken\", jsonData.token);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"joao@email.com\",\n  \"password\": \"MinhaSenh@123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/authenticate",
							"host": ["{{baseUrl}}"],
							"path": ["users", "authenticate"]
						},
						"description": "Autentica um usu√°rio e retorna um token JWT"
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"joao@email.com\",\n  \"password\": \"MinhaSenh@123\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users/authenticate",
									"host": ["{{baseUrl}}"],
									"path": ["users", "authenticate"]
								}
							},
							"status": "OK",
							"code": 200,
							"body": "{\n  \"message\": \"User authenticated successfully\",\n  \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"user\": {\n    \"id\": \"user-uuid\",\n    \"name\": \"Jo√£o Silva\",\n    \"email\": \"joao@email.com\",\n    \"role\": \"user\"\n  }\n}"
						}
					]
				},
				{
					"name": "Authenticate Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.token).to.be.a('string');",
									"});",
									"",
									"pm.test(\"User is admin\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.user.role).to.eql('admin');",
									"});",
									"",
									"// Salvar token de admin para usar em outras requisi√ß√µes",
									"if (pm.response.code === 200) {",
									"    var jsonData = pm.response.json();",
									"    pm.collectionVariables.set(\"token\", jsonData.token);",
									"    pm.collectionVariables.set(\"adminToken\", jsonData.token);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"admin@email.com\",\n  \"password\": \"AdminPass@123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/authenticate",
							"host": ["{{baseUrl}}"],
							"path": ["users", "authenticate"]
						},
						"description": "Autentica um usu√°rio administrador"
					}
				}
			]
		},
		{
			"name": "üß™ Test Scenarios",
			"item": [
				{
					"name": "Register User with Invalid Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has validation errors\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.be.an('array');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"\",\n  \"email\": \"invalid-email\",\n  \"password\": \"123\",\n  \"role\": \"invalid-role\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": ["{{baseUrl}}"],
							"path": ["users"]
						},
						"description": "Testa valida√ß√£o de dados inv√°lidos no registro"
					}
				},
				{
					"name": "Register Duplicate User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									"",
									"pm.test(\"Response has conflict message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include('already exists');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Jo√£o Silva\",\n  \"email\": \"joao@email.com\",\n  \"password\": \"MinhaSenh@123\",\n  \"role\": \"user\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": ["{{baseUrl}}"],
							"path": ["users"]
						},
						"description": "Testa registro de usu√°rio duplicado"
					}
				},
				{
					"name": "Authenticate with Invalid Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Response has error message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include('Invalid credentials');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"joao@email.com\",\n  \"password\": \"wrong-password\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/authenticate",
							"host": ["{{baseUrl}}"],
							"path": ["users", "authenticate"]
						},
						"description": "Testa autentica√ß√£o com credenciais inv√°lidas"
					}
				}
			]
		},
		{
			"name": "ÔøΩ Orders",
			"item": [
				{
					"name": "Emit Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has order data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('title');",
									"    pm.expect(jsonData).to.have.property('imageUrl');",
									"});",
									"",
									"// Salvar orderId para usar em testes admin",
									"if (pm.response.code === 201) {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.id) {",
									"        pm.collectionVariables.set(\"orderId\", jsonData.id);",
									"    }",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"type": "formdata",
							"formdata": [
								{
									"key": "title",
									"value": "Pedido de Teste via Postman",
									"type": "text"
								},
								{
									"key": "description",
									"value": "Descri√ß√£o detalhada do pedido de teste",
									"type": "text"
								},
								{
									"key": "image",
									"type": "file",
									"src": "",
									"description": "Imagem do pedido (PNG, JPEG, JPG - m√°x 5MB)"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": ["{{baseUrl}}"],
							"path": ["orders"]
						},
						"description": "Cria um novo pedido com imagem. Requer autentica√ß√£o de usu√°rio."
					}
				},
				{
					"name": "Get User Orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has orders array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('orders');",
									"    pm.expect(jsonData.orders).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Response has success message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.equal('Orders retrieved successfully');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": ["{{baseUrl}}"],
							"path": ["orders"]
						},
						"description": "Lista todos os pedidos do usu√°rio autenticado"
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{userToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/orders",
									"host": ["{{baseUrl}}"],
									"path": ["orders"]
								}
							},
							"status": "OK",
							"code": 200,
							"body": "{\n  \"message\": \"Orders retrieved successfully\",\n  \"orders\": [\n    {\n      \"id\": \"order-uuid-1\",\n      \"title\": \"Pedido de Teste\",\n      \"description\": \"Descri√ß√£o do pedido\",\n      \"status\": \"pending\",\n      \"imageUrl\": \"https://res.cloudinary.com/demo/image/upload/v1234567890/orders/abc123.jpg\",\n      \"userId\": \"user-uuid-1\",\n      \"createdAt\": \"2025-07-22T22:00:00.000Z\"\n    }\n  ]\n}"
						}
					]
				},
				{
					"name": "Emit Order - No Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Response has unauthorized message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include('token');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"type": "formdata",
							"formdata": [
								{
									"key": "title",
									"value": "Pedido sem Auth",
									"type": "text"
								},
								{
									"key": "description",
									"value": "Descri√ß√£o",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": ["{{baseUrl}}"],
							"path": ["orders"]
						},
						"description": "Testa cria√ß√£o de pedido sem autentica√ß√£o"
					}
				},
				{
					"name": "Emit Order - No Image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has validation error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include('required');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"type": "formdata",
							"formdata": [
								{
									"key": "title",
									"value": "Pedido sem Imagem",
									"type": "text"
								},
								{
									"key": "description",
									"value": "Descri√ß√£o do pedido sem imagem",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": ["{{baseUrl}}"],
							"path": ["orders"]
						},
						"description": "Testa cria√ß√£o de pedido sem imagem anexada"
					}
				},
				{
					"name": "Emit Order - Invalid Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has validation error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include('required');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"type": "formdata",
							"formdata": [
								{
									"key": "description",
									"value": "Descri√ß√£o sem t√≠tulo",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": ["{{baseUrl}}"],
							"path": ["orders"]
						},
						"description": "Testa valida√ß√£o de dados obrigat√≥rios"
					}
				}
			]
		},
		{
			"name": "üîß Admin",
			"item": [
				{
					"name": "Get All Orders (Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has orders array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('orders');",
									"    pm.expect(jsonData.orders).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Response has success message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.equal('Orders retrieved successfully');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/orders",
							"host": ["{{baseUrl}}"],
							"path": ["admin", "orders"]
						},
						"description": "Lista todos os pedidos (apenas admin)"
					}
				},
				{
					"name": "Update Order Status - Approve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"pm.test(\"Response has data object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data.status).to.equal('approved');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"approved\",\n  \"adminName\": \"Jo√£o Admin\",\n  \"reason\": \"Pedido atende a todos os requisitos\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/admin/orders/{{orderId}}/status",
							"host": ["{{baseUrl}}"],
							"path": ["admin", "orders", "{{orderId}}", "status"]
						},
						"description": "Aprova um pedido pendente"
					}
				},
				{
					"name": "Update Order Status - Reject",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"pm.test(\"Response has data object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data.status).to.equal('rejected');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"rejected\",\n  \"adminName\": \"Jo√£o Admin\",\n  \"reason\": \"Documenta√ß√£o incompleta\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/admin/orders/{{orderId}}/status",
							"host": ["{{baseUrl}}"],
							"path": ["admin", "orders", "{{orderId}}", "status"]
						},
						"description": "Rejeita um pedido pendente"
					}
				},
				{
					"name": "Update Order Status - Processing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"pm.test(\"Response has data object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data.status).to.equal('processing');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"processing\",\n  \"adminName\": \"Jo√£o Admin\",\n  \"reason\": \"Pedido em an√°lise\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/admin/orders/{{orderId}}/status",
							"host": ["{{baseUrl}}"],
							"path": ["admin", "orders", "{{orderId}}", "status"]
						},
						"description": "Coloca um pedido em processamento"
					}
				},
				{
					"name": "Update Order Status - Invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response has error message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData.message).to.include('not found');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"approved\",\n  \"adminName\": \"Jo√£o Admin\",\n  \"reason\": \"Teste com ID inv√°lido\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/admin/orders/invalid-uuid/status",
							"host": ["{{baseUrl}}"],
							"path": ["admin", "orders", "invalid-uuid", "status"]
						},
						"description": "Testa erro com ID de pedido inv√°lido"
					}
				},
				{
					"name": "Update Order Status - Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 or 403\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([401, 403]);",
									"});",
									"",
									"pm.test(\"Response has error message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"approved\",\n  \"adminName\": \"Usu√°rio Comum\",\n  \"reason\": \"Tentativa de acesso n√£o autorizado\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/admin/orders/{{orderId}}/status",
							"host": ["{{baseUrl}}"],
							"path": ["admin", "orders", "{{orderId}}", "status"]
						},
						"description": "Testa acesso negado para usu√°rios comuns"
					}
				}
			]
		},
		{
			"name": "üõ†Ô∏è Health Check",
			"item": [
				{
					"name": "Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/health",
							"host": ["{{baseUrl}}"],
							"path": ["health"]
						},
						"description": "Verifica se a API est√° funcionando"
					}
				}
			]
		}
	]
}
